#include "NtoskrnlOffsetFinder.h"
#include <iostream>

NtoskrnlOffsetFinder::NtoskrnlOffsetFinder()
{
	Ntoskrnl = LoadLibraryW(L"ntoskrnl.exe");
	if (Ntoskrnl == NULL)
	{
		std::cout << "Failed to load ntoskrnl.exe, last error: 0x" << std::hex << GetLastError() << std::endl;
		return;
	}

	void* PsInitialSystemProcess = GetProcAddress(Ntoskrnl, "PsInitialSystemProcess");
	if (PsInitialSystemProcess)
	{
		PsInitialSystemProcessOffset = (UINT64)PsInitialSystemProcess - (UINT64)Ntoskrnl;
		std::cout << "PsInitialSystemProcess offset: 0x" << std::hex << PsInitialSystemProcessOffset << std::endl;
	}
	else
	{
		std::cout << "Could not find PsInitialSystemProcess :(" << std::endl;
	}

	void* PsGetProcessId = GetProcAddress(Ntoskrnl, "PsGetProcessId");
	if (PsGetProcessId)
	{
		UniqueProcessIdOffset = *(DWORD*)((UINT64)PsGetProcessId + 3);
		std::cout << "UniqueProcessId offset: 0x" << std::hex << UniqueProcessIdOffset << std::endl;
		ActiveProcessLinksOffset = UniqueProcessIdOffset + 8;
		std::cout << "ActiveProcessLinks offset: 0x" << std::hex << ActiveProcessLinksOffset << std::endl;
	}
	else
	{
		std::cout << "Could not find PsGetProcessId :(" << std::endl;
	}

	void* PsGetProcessSignatureLevel = GetProcAddress(Ntoskrnl, "PsGetProcessSignatureLevel");
	if (PsGetProcessSignatureLevel)
	{
		SignatureLevelOffset = *(DWORD*)((UINT64)PsGetProcessSignatureLevel + 0xF);
		std::cout << "SignatureLevel offset: 0x" << std::hex << SignatureLevelOffset << std::endl;
	}
	else
	{
		std::cout << "Could not find PsGetProcessSignatureLevel :(" << std::endl;
	}
	FreeLibrary(Ntoskrnl);
}

const UINT64 NtoskrnlOffsetFinder::GetPsInitialSystemProcessOffset()
{
	return PsInitialSystemProcessOffset;
}

const UINT64 NtoskrnlOffsetFinder::GetUniqueProcessIdOffset()
{
	return UniqueProcessIdOffset;
}

const UINT64 NtoskrnlOffsetFinder::GetSignatureLevelOffset()
{
	return SignatureLevelOffset;
}

const UINT64 NtoskrnlOffsetFinder::GetActiveProcessLinksOffset()
{
	return ActiveProcessLinksOffset;
}