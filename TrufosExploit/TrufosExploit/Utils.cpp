#include <iostream>
#include <string>
#include "Utils.h"

void* GetKernelDriverAddress(const char* DriverName)
{
	const UINT64 SystemModuleInformation = 0xB;

	ULONG SystemInformationLength = 0;
	NtQuerySystemInformation((SYSTEM_INFORMATION_CLASS)SystemModuleInformation, 0, 0, &SystemInformationLength);

	PSYSTEM_MODULE_INFORMATION ModuleInfo = (PSYSTEM_MODULE_INFORMATION)new BYTE[SystemInformationLength];
	if (!ModuleInfo)
	{
		std::cout << "Memory allocation failed :(" << std::endl;
		return nullptr;
	}

	NTSTATUS Status = NtQuerySystemInformation((SYSTEM_INFORMATION_CLASS)SystemModuleInformation, ModuleInfo, SystemInformationLength, &SystemInformationLength);
	if (!NT_SUCCESS(Status))
	{
		std::cout << "NtQuerySystemInformation failed :(" << std::endl;
		return nullptr;
	}

	std::string ModuleToFindName(DriverName);
	for (unsigned __int64 i = 0; i < ModuleInfo->ModulesCount; i++)
	{
		void* ImageAddress = ModuleInfo->Modules[i].ImageBaseAddress;
		std::string ModuleName(ModuleInfo->Modules[i].Name);
		if (ModuleName.find(ModuleToFindName) != std::string::npos)
		{
			return ImageAddress;
		}
	}
	std::cout << "Failed to find " << DriverName << " module" << std::endl;
	return nullptr;
}

bool EnablePrivilege(const wchar_t* pszPrivilege)
{
    HANDLE Token;
    TOKEN_PRIVILEGES TokenPrivileges;

    if (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &Token)) 
    {
        std::cout << "OpenProcessToken failed :(" << std::endl << 
			"LastError:" << std::dec << GetLastError() << std::endl;
        return false;
    }

    if (!LookupPrivilegeValueW(nullptr, pszPrivilege, &TokenPrivileges.Privileges[0].Luid)) 
    {
        std::cout << "LookupPrivilegeValue failed :(" << std::endl <<
			"LastError: " << std::dec << GetLastError() << std::endl;
        CloseHandle(Token);
        return false;
    }

    TokenPrivileges.PrivilegeCount = 1;
    TokenPrivileges.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;

    if (!AdjustTokenPrivileges(Token, FALSE, &TokenPrivileges, sizeof(TOKEN_PRIVILEGES), nullptr, nullptr)) 
    {
        std::cout << "AdjustTokenPrivileges failed :(" << std::endl << 
			"LastError: " << std::dec << GetLastError() << std::endl;
        CloseHandle(Token);
        return false;
    }

    CloseHandle(Token);

    return true;
}
